def solutionplot(R_pred, D_pred, t_train, R_train, D_train):
    fig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, sharex=True, figsize=(25, 7))
    ax0.plot(t_train, R_train, 'b-', linewidth = 2, label = 'Exact')
    ax0.plot(t_train, R_pred, 'r-', linewidth = 2, label = 'Prediction')
    ax0.set_xlabel('$t$')
    ax0.set_ylabel('$R(t)$')
    ax0.set_title('Rumors', fontsize=10)
    ax1.plot(t_train, D_train, 'b-', linewidth=2, label='Exact')
    ax1.plot(t_train, D_pred, 'r-', linewidth=2, label='Prediction')
    ax1.set_xlabel('$t$')
    ax1.set_ylabel('$D(t)$')
    ax1.set_title('Debunkers', fontsize=10)
    plt.show()
    fig, (ax2, ax3) = plt.subplots(nrows=1, ncols=2, sharex=True, figsize=(25, 7))
    num = len(R_pred)
    rumors = np.zeros(num)
    for i in range(1, num):
        rumors[i] = R_train[i] - R_train[i-1]
    rumors[0] = 0

    cases = np.zeros(num)
    for j in range(1, num):
        cases[j] = R_pred[j] - R_pred[j-1]
    cases[0] = 0

    ax2.plot(t_train, rumors, 'b-', linewidth=2, label='Exact')
    ax2.plot(t_train, cases, 'r--', linewidth=2, label='Prediction')
    ax2.set_xlabel('$t$')
    ax2.set_ylabel('$R(t)$')
    ax2.set_title('Rumors', fontsize=10)

    num1 = len(R_pred)
    debunkers = np.zeros(num1)
    for i in range(1, num1):
        debunkers[i] = D_train[i] - D_train[i-1]
    debunkers[0] = 0

    recover = np.zeros(num1)
    for j in range(1, num1):
        recover[j] = D_pred[j] - D_pred[j-1]
    recover[0] = 0

    ax3.plot(t_train, debunkers, 'b-', linewidth=2, label='Exact')
    ax3.plot(t_train, recover, 'r--', linewidth=2, label='Prediction')
    ax3.set_xlabel('$t$')
    ax3.set_ylabel('$D(t)$')
    ax3.set_title('Debunkers', fontsize=10)
    plt.show()
